name: Visual Testing

concurrency:
  group: "visual-testing"
  cancel-in-progress: true

on:
  push:
    branches: ["main", "lostpixel"]
  pull_request:
    branches: ["main", "lostpixel"]

jobs:
  visual-testing:
    # Using Ubuntu since it has the lowest per-minute rate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard:
          [
            1/20,
            2/20,
            3/20,
            4/20,
            5/20,
            6/20,
            7/20,
            8/20,
            9/20,
            10/20,
            11/20,
            12/20,
            13/20,
            14/20,
            15/20,
            16/20,
            17/20,
            18/20,
            19/20,
            20/20,
          ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ">=22"
          cache: "npm"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright and dependencies
        run: |
          npx playwright install --with-deps chromium webkit firefox
          npx playwright install-deps

      - name: Remove Safari autoplay script
        run: rm -f ./quartz/components/tests/safari-autoplay.js

      - name: Start local server
        run: |
          npx quartz build --serve &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

      - name: Wait for server
        run: |
          # Wait for the server to be ready
          while ! nc -z localhost 8080; do
            sleep 0.1 # Check every 100ms
            # Check if server is still running
            if ! ps -p "$SERVER_PID" > /dev/null; then
              echo "Server failed to start"
              exit 1
            fi
          done
          echo "Server is ready"

      - name: Make folder for screenshots
        run: mkdir -p ./lost-pixel

      - name: Run Playwright tests
        id: playwright
        continue-on-error: true
        run: npx playwright test --shard ${{ matrix.shard }} -g "(lostpixel)"
        env:
          CI: true
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Create sanitized shard
        if: always()
        run: echo "SANITIZED_SHARD=${MATRIX_SHARD%%/*}" >> $GITHUB_ENV
        env:
          MATRIX_SHARD: ${{ matrix.shard }}

      - name: Upload Playwright traces
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-traces-shard-${{ env.SANITIZED_SHARD }}
          path: test-results/
          retention-days: 7

      - name: Upload Lost Pixel screenshots shard
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lost-pixel-screenshots-shard-${{ env.SANITIZED_SHARD }}
          path: ./lost-pixel
          retention-days: 1

      - name: Fail if playwright tests failed
        if: steps.playwright.outcome == 'failure'
        run: exit 1

  combine-and-upload:
    needs: visual-testing
    runs-on: ubuntu-latest
    if: always()

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ">=22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download all Lost Pixel screenshot shards
        uses: actions/download-artifact@v4
        with:
          pattern: lost-pixel-screenshots-*
          path: ./all-lost-pixel-shards
          merge-multiple: true

      - name: Combine screenshots into ./lost-pixel directory
        id: combine
        run: |
          shopt -s globstar # Enable recursive globbing
          mkdir -p ./lost-pixel
          cp -v ./all-lost-pixel-shards/**/*.png ./lost-pixel/
          echo "Contents of ./lost-pixel after combining:"
          ls -R ./lost-pixel
          if [ -z "$(ls -A ./lost-pixel)" ]; then
            echo "screenshots_found=false" >> "$GITHUB_OUTPUT"
            echo "./lost-pixel directory is empty after combination attempt."
          else
            echo "screenshots_found=true" >> "$GITHUB_OUTPUT"
            echo "Screenshots found in ./lost-pixel."
          fi

      - name: Run LostPixel on combined screenshots
        if: steps.combine.outputs.screenshots_found == 'true'
        uses: lost-pixel/lost-pixel@v3.16.0
        env:
          LOST_PIXEL_API_KEY: ${{ secrets.LOST_PIXEL_API_KEY }}
          LOST_PIXEL_PROJECT_ID: ${{ secrets.LOST_PIXEL_PROJECT_ID }}
          LOST_PIXEL_CONFIG_PATH: lostpixel.config.ts

      - name: Clean up downloaded shards
        run: rm -rf ./all-lost-pixel-shards
