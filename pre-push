#!/bin/sh

function cleanup {
    if [[ $STASHED_CHANGES -eq 1 ]]; then
        git stash pop
    fi
    if $SERVER_STARTED; then
        kill -TERM $SERVER_PID
    fi
}

set -e

CURRENT_BRANCH=$(git symbolic-ref --short head)
SERVER_STARED=false

if [[ $CURRENT_BRANCH != "main" ]]; then
	exit 0
fi

GIT_ROOT=$(git rev-parse --show-toplevel)
cd "$GIT_ROOT"

# Stash any changes, because we will auto-commit later
PREV_NUM_STASHES=$(git stash list | wc -l)
git stash push --include-untracked
# Check if anything was stashed
STASHED_CHANGES=$([[ $(git stash list | wc -l) -gt $PREV_NUM_STASHES ]] && echo 1 || echo 0)

trap 'cleanup' EXIT

# Check that unit tests pass
# Run jest tests
npm run test
# Run fish tests
fish -c "fishtape \"$GIT_ROOT\"/scripts/tests/update_references.test.fish"

# Run spellcheck on all markdown files
TEMP_DICT="/tmp/candidate_wordlist.txt"
PERM_DICT=".wordlist.txt"

set +e # Temporarily allow errors
npx spellchecker --no-suggestions --quiet --dictionaries $PERM_DICT --generate-dictionary $TEMP_DICT content/**.md !content/drafts/**/*.md

# Delete any words which should not be added to the ignore list. Make sure to fix any such words before quitting the editor.
if [ $? -ne 0 ]; then
	nvim $TEMP_DICT -c 'lua vim.notify("Delete invalid words which should not be added to the dictionary.")' && cat $TEMP_DICT >>$PERM_DICT && rm $TEMP_DICT
	set -e # Re-enable errors
	npx spellchecker --no-suggestions --quiet --dictionaries $PERM_DICT --generate-dictionary $TEMP_DICT content/**.md !content/drafts/**/*.md

	# Amend the commit with the updated dictionary
	git add $PERM_DICT
	git commit --amend --no-edit
fi
set -e

echo "\033[0;32mSpellcheck passed\033[0m" # In green

# Convert images to AVIF format, mp4s to webm, and remove metadata
fish "$GIT_ROOT"/scripts/convert_assets.fish --remove-originals --strip-metadata

TYPES_TO_CHECK="ico,svg,avif,webm"
find "$GIT_ROOT"/quartz/static -type f -name "*.$TYPES_TO_CHECK" -exec "$GIT_ROOT"/scripts/upload_to_r2.sh {} --remove-originals \;

SERVER_STARTED=false
if ! nc -z localhost 8080; then
	npx quartz build --serve >/dev/null &
	SERVER_PID=$! # Store the server's process ID
	SERVER_STARTED=true
	# Wait for the server to be ready
	while ! nc -z localhost 8080; do
		sleep 0.1 # Check every 100ms
	done

	echo "Started quartz server."
fi

# Check that all internal links on the served site are valid
# linkchecker http://localhost:8080 --no-status --ignore-url=/static
# Check that all external assets (presumably hosted on Cloudflare R2) are valid
# ASSET_REFERENCING_FILES=$(fish $(source "$GIT_ROOT/scripts/utils.fish" && find_asset_referencing_files)) # TODO broken
# echo $ASSET_REFERENCING_FILES # TODO check image files
# linkchecker --check-extern --ignore-urls="(?!.*\.(png|jpe?g|gif|webp|webm|svg|mp3|mp4)$).*" http://localhost:8080

# Run visual regression testing
set +e
fish "$GIT_ROOT/scripts/run_backstop.fish"

TEST_STATUS=$?
if [ $TEST_STATUS -ne 0 ]; then
	exit $TEST_STATUS
fi

# If references updated and files deleted, then commit the changes
git add -A
# Prompt the user to review the changes
git commit -m "Uploaded assets to r2 and updated references."
