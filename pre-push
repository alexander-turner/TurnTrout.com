#!/bin/sh

# Check that unit tests pass

CURRENT_BRANCH=$(git symbolic-ref --short head)

if [[ $CURRENT_BRANCH = "main" ]]; then
	npm run test
	result=$?
	if [[ $? -ne 0 ]]; then
		echo "Failed unit tests. Not pushing!" >&2
		exit 1
	fi
fi

# Run spellcheck on all markdown files
TEMP_DICT="/tmp/candidate_wordlist.txt"
PERM_DICT=".wordlist.txt"

alias SPELLCHECK="npx spellchecker --no-suggestions --quiet --dictionaries $PERM_DICT --generate-dictionary $TEMP_DICT"
SPELLCHECK content/**.md !content/drafts/**/*.md

# Delete any words which should not be added to the ignore list. Make sure to fix any such words before quitting the editor.
if [ $? -ne 0 ]; then
	nvim $TEMP_DICT -c 'lua vim.notify("Delete invalid words which should not be added to the dictionary.")' && cat $TEMP_DICT >>$PERM_DICT && rm $TEMP_DICT
	SPELLCHECK content/**.md
	if [ $? -ne 0 ]; then
		echo "Spellcheck failed"
		exit 1
	fi

	# Amend the commit with the updated dictionary
	git add $PERM_DICT
	git commit --amend --no-edit
fi

echo "Spellcheck passed"

# Optimize any newly added or modified images which are staged
for file in $(git diff --cached --name-only --diff-filter=ACM); do
	if [[ "$file" =~ \.jpe?g$ ]]; then
		echo "Compressing JPEG image: $file"
		jpegoptim --max=80 "$file" --strip-all
	elif [[ "$file" =~ \.png$ ]]; then
		echo "Compressing PNG image: $file"
		# Strip metadata
		optipng -o7 "$file" -strip all
	elif [[ "$file" =~ \.webp$ ]]; then
		echo "Compressing WEBP image: $file"
		cwebp -q 80 "$file" -o "$file"
	elif [[ "$file" =~ \.gif$ ]]; then
		echo "Compressing GIF image: $file"
		# NOTE unsure if metadata stripped
		gifsicle -O3 "$file" -o "$file" --colors 256
	fi
done

npx backstop test --config=backstop.cjs

# Check if the test failed
if [[ $? -ne 0 ]]; then
	echo "Visual regression test failed. Review the report:"

	# Open the BackstopJS report (replace with your actual command)
	open backstop/backstop_data/html_report/index.html &

	# Prompt for approval
	read -p "Do you approve the changes? (y/N): " answer </dev/tty

	# Update references if approved
	if [[ "$answer" == "y" ]]; then
		npx backstop approve --config=backstop.cjs
		echo "Reference screenshots updated."
	else
		echo "Changes rejected. Test failure remains."
		exit 1
	fi
else
	echo "Visual regression test passed!"
fi

exit 0
