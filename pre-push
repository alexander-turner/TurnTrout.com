#!/bin/sh

TMUX_TARGET=""
EXISTING_SERVER_PID=""

function cleanup {
    local exit_code=$?
    
    # Ensure cleanup runs even if script fails
    set +e
    
    if [ $(git status --porcelain | wc -l) -gt 0 ]; then
        echo "Committing changes..."
        git add -A
        git commit -m "Uploaded assets to r2 and updated references." || true
    fi

    PUSHED_CHANGES=$1
    if [[ $PUSHED_CHANGES -eq 1 ]]; then
        echo "Restoring stashed changes..."
        git stash pop >>/dev/null || true
    fi
    
    if [[ $SERVER_STARTED -eq 1 ]]; then
        if ps -p "$SERVER_PID" > /dev/null; then
            echo "Killing temporary quartz server..."
            kill -TERM $SERVER_PID || true
        fi
        
        if [[ -n "$TMUX_TARGET" ]]; then
            echo "Restarting Quartz in original tmux pane: $TMUX_TARGET"
            tmux send-keys -t "$TMUX_TARGET" "cd $GIT_ROOT && npx quartz build --serve" C-m
        fi
    fi

    # Restore original exit code
    return $exit_code
}

# If there are any changes, stash them and return 1, otherwise return 0.
function stash_and_exit {
    PREV_NUM_STASHES=$(git stash list | wc -l)
    git stash push --include-untracked >>/dev/null
    # Check if anything was stashed
    STASHED_CHANGES=$([[ $(git stash list | wc -l) -gt $PREV_NUM_STASHES ]] && echo 1 || echo 0)
    echo "$STASHED_CHANGES"
}

set -e

CURRENT_BRANCH=$(git symbolic-ref --short head)
SERVER_STARTED=false

if [[ $CURRENT_BRANCH != "main" ]]; then
	exit 0
fi

GIT_ROOT=$(git rev-parse --show-toplevel)
cd "$GIT_ROOT"

PUSHED_CHANGES=$(stash_and_exit)
trap 'cleanup $PUSHED_CHANGES' EXIT

# Run typechecks
mypy $GIT_ROOT/scripts/**py

# eslint and stylelint already has ignore rules
npx eslint --fix "$GIT_ROOT"
npx stylelint --fix quartz/**/*.scss 
pylint "$GIT_ROOT" --rcfile="$GIT_ROOT/.pylintrc"

# Run static checks on markdown files
fish "$GIT_ROOT/scripts/spellchecker.fish"
python "$GIT_ROOT/scripts/source_file_checks.py"

# Run jest tests
npm run test

# Compress and upload assets - runs PyTest tests
sh "$GIT_ROOT/scripts/handle_local_assets.sh"

# Restart the server so that pages don't rely on stale assets which got deleted and uploaded
EXISTING_SERVER_PID=$(pgrep quartz || true)
if [[ -n "$EXISTING_SERVER_PID" ]]; then
    # Get tmux info for the existing quartz process
    TMUX_INFO=$(ps -o sid= -p "$EXISTING_SERVER_PID" | xargs -I{} tmux list-panes -a -F '#{session_name}:#{window_index}.#{pane_index} #{pane_pid}' | grep {})
    
    if [[ -n "$TMUX_INFO" ]]; then
        TMUX_TARGET=$(echo "$TMUX_INFO" | awk '{print $1}')
        echo "Found Quartz running in tmux pane: $TMUX_TARGET"
    fi
    
    echo "Pausing existing server (PID: $EXISTING_SERVER_PID)"
    kill -TERM $EXISTING_SERVER_PID
    
    # Add a longer delay to ensure the port is released
    sleep 3
    
    # Explicitly kill any process using port 8080
    PORT_PID=$(lsof -ti:8080 || true)
    if [[ -n "$PORT_PID" ]]; then
        echo "Killing process using port 8080 (PID: $PORT_PID)"
        kill -9 $PORT_PID || true
        sleep 2
    fi
fi

# Start new server with output logging
echo "Starting new quartz server..."
npx quartz build --serve 2>&1 | tee /tmp/quartz-server.log &
SERVER_PID=$! # Store the server's process ID
SERVER_STARTED=true

# Increase timeout and add counter to prevent infinite loop
TIMEOUT=30  # Increased timeout to 60 seconds
COUNTER=0
while ! nc -z localhost 8080; do
    sleep 1  # Increased sleep to 1 second intervals
    COUNTER=$((COUNTER + 1))
    if [ $COUNTER -ge $TIMEOUT ]; then
        echo "Server failed to start after ${TIMEOUT} seconds"
        echo "Server logs:"
        cat /tmp/quartz-server.log
        exit 1
    fi
    echo "Waiting for server to start... ($COUNTER seconds)"
done

echo "Quartz server successfully started on port 8080"

# Run visual regression testing
set +e
npx playwright test --config="$GIT_ROOT/playwright.config.ts"

echo "Checking rendered pages for malformed HTML contents."
python "$GIT_ROOT"/scripts/built_site_checks.py
if [ $? -ne 0 ]; then
    exit 1
fi
echo "\033[0;32mRendered pages look good.\033[0m"

# Make sure that all internal and CDN links are valid
#  Also checks syntax of md links.
fish "$GIT_ROOT/scripts/linkchecker.fish"

# Ensure that the date is updated on publish.
# Has to come after linkchecker, because otherwise it'll check for a new article's remote github link which doesn't exist yet
python "$GIT_ROOT/scripts/update_date_on_publish.py"
echo "Updated date on publish."


# Finally, timestamp the final commit
sh "$GIT_ROOT/scripts/timestamp_last_commit.sh"
echo "Timestamped last commit."

exit 0
