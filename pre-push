#!/bin/sh

function cleanup {
    if [ $(git status --porcelain | wc -l) -gt 0 ]; then
        # If references updated and files deleted, then commit the changes
        git add -A
        git commit -m "Uploaded assets to r2 and updated references."
    fi

    PUSHED_CHANGES=$1
    if [[ $PUSHED_CHANGES -eq 1 ]]; then
        git stash pop >>/dev/null
    fi
    if $SERVER_STARTED; then
        kill -TERM $SERVER_PID
    fi
}

# If there are any changes, stash them and return 1, otherwise return 0.
function stash_and_exit {
    PREV_NUM_STASHES=$(git stash list | wc -l)
    git stash push --include-untracked >>/dev/null
    # Check if anything was stashed
    STASHED_CHANGES=$([[ $(git stash list | wc -l) -gt $PREV_NUM_STASHES ]] && echo 1 || echo 0)
    echo "$STASHED_CHANGES"
}

set -e

CURRENT_BRANCH=$(git symbolic-ref --short head)
SERVER_STARTED=false

if [[ $CURRENT_BRANCH != "main" ]]; then
	exit 0
fi

GIT_ROOT=$(git rev-parse --show-toplevel)
cd "$GIT_ROOT"

PUSHED_CHANGES=$(stash_and_exit)
trap 'cleanup $PUSHED_CHANGES' EXIT

# Run typechecks
mypy $GIT_ROOT/scripts/**py

# eslint already has ignore rules
npx eslint --fix $GIT_ROOT

# # Check for DeepSource major (-03) or critical issues (-04)
# ISSUES=$(deepsource issues list --repo github.com/alexander-turner/TurnTrout.com) # Note: Use `egrep` instead of `grep` to screen issues
# if [[ -n $ISSUES ]]; then
#     echo "DeepSource issues found:"
#     echo "$ISSUES"
#     exit 1
# fi

fish "$GIT_ROOT/scripts/spellchecker.fish"

# Run jest tests
npm run test

# Compress and upload assets
sh "$GIT_ROOT/scripts/handle_local_assets.sh"

SERVER_STARTED=false
if ! nc -z localhost 8080; then
	npx quartz build --serve >/dev/null &
	SERVER_PID=$! # Store the server's process ID
	SERVER_STARTED=true
	# Wait for the server to be ready
	while ! nc -z localhost 8080; do
		sleep 0.1 # Check every 100ms
	done

	echo "Started quartz server."
fi

# Run visual regression testing
set +e
fish "$GIT_ROOT/scripts/run_backstop.fish"

TEST_STATUS=$?
# Check if the test failed
if [[ "$TEST_STATUS" -ne 0 ]]; then
    echo "Visual regression test failed. Review the report:"
    open backstop/backstop_data/html_report/index.html &
    # Prompt for approval
    read -p "Do you approve the changes? (y/N): " answer </dev/tty
    # Update references if approved
    if [[ "$answer" = "y" ]]; then
        npx backstop approve --config=backstop.cjs
        echo "Reference screenshots updated."
    else
        echo "Changes rejected. Test failure remains."
        exit 1
    fi
fi

echo "Checking rendered pages for malformed HTML contents."
python "$GIT_ROOT"/scripts/built_site_checks.py
if [ $? -ne 0 ]; then
    exit 1
fi
echo "\033[0;32mRendered pages look good.\033[0m"

# Make sure that all internal and CDN links are valid
#  Also checks syntax of md links.
fish "$GIT_ROOT/scripts/linkchecker.fish"

# Ensure that the date is updated on publish
python "$GIT_ROOT/scripts/update_date_on_publish.py"
